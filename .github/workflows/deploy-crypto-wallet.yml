name: Deploy Crypto Wallet to GitHub Pages

on:
  push:
    branches: [main]
    paths: ['apps/crypto-wallet/**']
  pull_request:
    branches: [main]
    paths: ['apps/crypto-wallet/**']

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      crypto_wallet_changed: ${{ steps.changes.outputs.crypto_wallet }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            crypto_wallet:
              - 'apps/crypto-wallet/**'

  build-and-deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.crypto_wallet_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Build crypto wallet
        run: pnpm --filter crypto-wallet build
        env:
          NODE_ENV: production

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './apps/crypto-wallet/dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

      - name: Comment on PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deployment.outputs.page_url }}';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Crypto Wallet Preview Deployed!**
              
              âœ… Your changes have been successfully deployed to GitHub Pages.
              
              **Preview URL:** ${deploymentUrl}
              
              This preview will be updated automatically with new commits to this PR.`
            });

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const deploymentUrl = '${{ steps.deployment.outputs.page_url }}';

            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: success ? 'success' : 'failure',
              environment_url: success ? deploymentUrl : undefined,
              description: success ? 'Deployment successful' : 'Deployment failed'
            });
